function varargout = jlMatCall(jlfile, jlevalstr, jlouts, jlins)
    % make temp directory to stash files as variables
    tdir=tempname(); mkdir(tdir);
    
    % load matlab input variables as ra files for julia input
    for jlin = jlins
        save(fullfile(tdir,'input.mat'), jlins{:}, '-v7.3');
    end
    
    % (-1) construct julia script to execute function call
    jlspath = fullfile(tdir,'script.jl'); % make julia script path
    jls = fopen(jlspath, 'w');            % make julia script file
    fprintf(jls, 'using MAT;\n');     % load raread/rawrite
    % (1) include jlfile
    if ~isempty(jlfile)
        fprintf(jls, 'include("%s");\n', jlfile);
    end
    % (2) load mat file to julia env
    fprintf(jls, '_din = matread("%s")\n', fullfile(tdir, 'input.mat'));
    fprintf(jls, 'for k in keys(_d); @eval ($(Symbol(k)) = _d[k]); end;\n');
    % (3) call eval str
    fprintf(jls, '%s\n', jlevalstr);
    % (4) write julia output variables as ra files for matlab output
    for jlout = jlouts
        fprintf(jls, 'rawrite(%s, raw"%s");\n', char(jlout), fullfile(tdir,char(jlout)));
    end
    % (5) exit julia script
    fprintf(jls, 'exit();\n');
    % (6) close julia script file
    fclose(jls);
    
    % run julia script
    jlevalcmd = sprintf('julia --depwarn=no --load "%s"',jlspath)
    disp(jlspath)
    system(jlevalcmd);
    
    % load output ra files to varargout
    varargout = cell(length(jlouts),1);
    voidx = 0;
    for jlout = jlouts
        voidx = voidx + 1
        rapath = fullfile(tdir, char(jlout))
        ramat = raread(rapath)
        varargout{voidx} = ramat
    end
end % function



file = matopen("matfile.mat")
read(file, "varname") # note that this does NOT introduce a variable ``varname`` into scope
close(file)
To write a variable to a MAT file:

file = matopen("matfile.mat", "w")
write(file, "varname", variable)
close(file)